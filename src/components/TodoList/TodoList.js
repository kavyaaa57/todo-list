import React, { useState, useEffect } from 'react';
import './TodoList.css';

function TodoList() {
  const [todos, setTodos] = useState([]);
  const [newTodo, setNewTodo] = useState('');
  const [fontSize, setFontSize] = useState(16); // Default font size
  const [contrastMode, setContrastMode] = useState(false); // High contrast
  const [darkMode, setDarkMode] = useState(false); // Dark/Light Mode
  const [language, setLanguage] = useState('en'); // Language selection
  const [editingIndex, setEditingIndex] = useState(-1); // Index for editing todo
  const [timezone, setTimezone] = useState('UTC'); // Default timezone for display

  // Translations for different languages
  const translations = {
    en: { title: 'TODO List', addTask: 'Add a task', addButton: 'Add', highContrast: 'High Contrast', normalContrast: 'Normal Contrast', lightMode: 'Light Mode', darkMode: 'Dark Mode', editButton: 'Edit', deleteButton: 'Delete', completedHeader: 'Completed Tasks', pendingHeader: 'Pending Tasks' },
    hi: { title: '‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§∏‡•Ç‡§ö‡•Ä', addTask: '‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ú‡•ã‡§°‡§º‡•á‡§Ç', addButton: '‡§ú‡•ã‡§°‡§º‡•á‡§Ç', highContrast: '‡§â‡§ö‡•ç‡§ö ‡§ï‡§Ç‡§ü‡•ç‡§∞‡§æ‡§∏‡•ç‡§ü', normalContrast: '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ï‡§Ç‡§ü‡•ç‡§∞‡§æ‡§∏‡•ç‡§ü', lightMode: '‡§π‡§≤‡•ç‡§ï‡§æ ‡§Æ‡•ã‡§°', darkMode: '‡§°‡§æ‡§∞‡•ç‡§ï ‡§Æ‡•ã‡§°', editButton: '‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç', deleteButton: '‡§π‡§ü‡§æ‡§è‡§Ç', completedHeader: '‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ï‡§æ‡§∞‡•ç‡§Ø', pendingHeader: '‡§≤‡§Ç‡§¨‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø' },
    ta: { title: '‡Æö‡ØÜ‡ÆØ‡Æ≤‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æ™‡Æü‡Øç‡Æü‡Æø‡ÆØ‡Æ≤‡Øç', addTask: '‡Æ™‡Æ£‡Æø ‡Æö‡Øá‡Æ∞‡Øç‡Æï‡Øç‡Æï', addButton: '‡Æö‡Øá‡Æ∞‡Øç‡Æï‡Øç‡Æï', highContrast: '‡Æâ‡ÆØ‡Æ∞‡Øç ‡ÆÆ‡Ææ‡Æ±‡ØÅ‡Æ™‡Ææ‡Æü‡ØÅ', normalContrast: '‡Æö‡Ææ‡Æ§‡Ææ‡Æ∞‡Æ£ ‡ÆÆ‡Ææ‡Æ±‡ØÅ‡Æ™‡Ææ‡Æü‡ØÅ', lightMode: '‡Æí‡Æ≥‡Æø‡Æ∞‡Øç‡Æ®‡Øç‡Æ§ ‡Æ™‡ÆØ‡Æ©‡Øç‡ÆÆ‡ØÅ‡Æ±‡Øà', darkMode: '‡Æá‡Æ∞‡ØÅ‡Æ£‡Øç‡Æü ‡Æ™‡ÆØ‡Æ©‡Øç‡ÆÆ‡ØÅ‡Æ±‡Øà', editButton: '‡Æ§‡Øä‡Æï‡ØÅ', deleteButton: '‡ÆÖ‡Æ¥‡Æø', completedHeader: '‡Æ®‡Æø‡Æ±‡Øà‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ', pendingHeader: '‡Æ®‡Æø‡Æ≤‡ØÅ‡Æµ‡Øà‡ÆØ‡Æø‡Æ≤‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ' },
    te: { title: '‡∞™‡∞®‡∞ø ‡∞≤‡∞ø‡∞∏‡±ç‡∞ü‡±ç', addTask: '‡∞™‡∞®‡∞ø ‡∞ö‡±á‡∞∞‡±ç‡∞ö‡±Å', addButton: '‡∞ö‡±á‡∞∞‡±ç‡∞ö‡±Å', highContrast: '‡∞Ö‡∞ß‡∞ø‡∞ï ‡∞ï‡∞æ‡∞Ç‡∞§‡∞ø ‡∞µ‡±ç‡∞Ø‡∞§‡±ç‡∞Ø‡∞æ‡∞∏‡∞Ç', normalContrast: '‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£ ‡∞ï‡∞æ‡∞Ç‡∞§‡∞ø ‡∞µ‡±ç‡∞Ø‡∞§‡±ç‡∞Ø‡∞æ‡∞∏‡∞Ç', lightMode: '‡∞ï‡∞æ‡∞Ç‡∞§‡∞ø ‡∞Æ‡±ã‡∞°‡±ç', darkMode: '‡∞°‡∞æ‡∞∞‡±ç‡∞ï‡±ç ‡∞Æ‡±ã‡∞°‡±ç', editButton: '‡∞∏‡∞Ç‡∞™‡∞æ‡∞¶‡∞ø‡∞Ç‡∞ö‡±Å', deleteButton: '‡∞§‡±ä‡∞≤‡∞ó‡∞ø‡∞Ç‡∞ö‡±Å', completedHeader: '‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞Ø‡∞ø‡∞® ‡∞™‡∞®‡±Å‡∞≤‡±Å', pendingHeader: '‡∞™‡±Ü‡∞Ç‡∞°‡∞ø‡∞Ç‡∞ó‡±ç ‡∞™‡∞®‡±Å‡∞≤‡±Å' },
    ml: { title: '‡¥ü‡µÅ‡¥°‡µÅ ‡¥≤‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡µç', addTask: '‡¥™‡¥£‡¥ø ‡¥ö‡µá‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥ï', addButton: '‡¥ö‡µá‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥ï', highContrast: '‡¥â‡¥Ø‡µº‡¥®‡µç‡¥® ‡¥ï‡µã‡µ∫‡¥ü‡µç‡¥∞‡¥æ‡¥∏‡µç‡¥±‡µç‡¥±‡µç', normalContrast: '‡¥∏‡¥æ‡¥ß‡¥æ‡¥∞‡¥£ ‡¥ï‡µã‡µ∫‡¥ü‡µç‡¥∞‡¥æ‡¥∏‡µç‡¥±‡µç‡¥±‡µç', lightMode: '‡¥≤‡µà‡¥±‡µç‡¥±‡µç ‡¥Æ‡µã‡¥°‡µç', darkMode: '‡¥°‡¥æ‡µº‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡µã‡¥°‡µç', editButton: '‡¥é‡¥°‡¥ø‡¥±‡µç‡¥±‡µç', deleteButton: '‡¥á‡¥≤‡µç‡¥≤‡¥æ‡¥§‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï', completedHeader: '‡¥™‡µÇ‡µº‡¥§‡µç‡¥§‡¥ø‡¥Ø‡¥æ‡¥Ø ‡¥ú‡µã‡¥≤‡¥ø‡¥ï‡µæ', pendingHeader: '‡¥ï‡¥æ‡¥§‡µç‡¥§‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥® ‡¥ú‡µã‡¥≤‡¥ø‡¥ï‡µæ' },
    kn: { title: '‡≤ü‡≥Å‡≤°‡≥ä ‡≤™‡≤ü‡≥ç‡≤ü‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å', addTask: '‡≤ï‡≤æ‡≤∞‡≥ç‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø', addButton: '‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø', highContrast: '‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≤ø‡≤® ‡≤µ‡≥ç‡≤Ø‡≤§‡≥ç‡≤Ø‡≤æ‡≤∏', normalContrast: '‡≤∏‡≤æ‡≤Æ‡≤æ‡≤®‡≥ç‡≤Ø ‡≤µ‡≥ç‡≤Ø‡≤§‡≥ç‡≤Ø‡≤æ‡≤∏', lightMode: '‡≤≤‡≥à‡≤ü‡≥ç ‡≤Æ‡≥ã‡≤°‡≥ç', darkMode: '‡≤°‡≤æ‡≤∞‡≥ç‡≤ï‡≥ç ‡≤Æ‡≥ã‡≤°‡≥ç', editButton: '‡≤§‡≤ø‡≤¶‡≥ç‡≤¶‡≥Å', deleteButton: '‡≤Ö‡≤≥‡≤ø‡≤∏‡≥Å', completedHeader: '‡≤™‡≥Ç‡≤∞‡≥ç‡≤£‡≤ó‡≥ä‡≤Ç‡≤° ‡≤ï‡≤æ‡≤∞‡≥ç‡≤Ø', pendingHeader: '‡≤¨‡≤æ‡≤ï‡≤ø ‡≤á‡≤∞‡≥Å‡≤µ ‡≤ï‡≤æ‡≤∞‡≥ç‡≤Ø' },
    mr: { title: '‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§∏‡•Ç‡§ö‡•Ä', addTask: '‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ú‡•ã‡§°‡§æ', addButton: '‡§ú‡•ã‡§°‡§æ', highContrast: '‡§â‡§ö‡•ç‡§ö ‡§ï‡•â‡§®‡•ç‡§ü‡•ç‡§∞‡§æ‡§∏‡•ç‡§ü', normalContrast: '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ï‡•â‡§®‡•ç‡§ü‡•ç‡§∞‡§æ‡§∏‡•ç‡§ü', lightMode: '‡§≤‡§æ‡§á‡§ü ‡§Æ‡•ã‡§°', darkMode: '‡§°‡§æ‡§∞‡•ç‡§ï ‡§Æ‡•ã‡§°', editButton: '‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡§æ', deleteButton: '‡§π‡§ü‡§µ‡§æ', completedHeader: '‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ï‡§æ‡§∞‡•ç‡§Ø', pendingHeader: '‡§≤‡§Ç‡§¨‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø' },
    bn: { title: 'TODO ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ', addTask: '‡¶ï‡¶æ‡¶ú ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®', addButton: '‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®', highContrast: '‡¶â‡¶ö‡ßç‡¶ö ‡¶ï‡¶®‡¶ü‡ßç‡¶∞‡¶æ‡¶∏‡ßç‡¶ü', normalContrast: '‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï ‡¶ï‡¶®‡¶ü‡ßç‡¶∞‡¶æ‡¶∏‡ßç‡¶ü', lightMode: '‡¶≤‡¶æ‡¶á‡¶ü ‡¶Æ‡ßã‡¶°', darkMode: '‡¶°‡¶æ‡¶∞‡ßç‡¶ï ‡¶Æ‡ßã‡¶°', editButton: '‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®', deleteButton: '‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡ßÅ‡¶®', completedHeader: '‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶æ‡¶ú', pendingHeader: '‡¶Ö‡¶Æ‡ßÄ‡¶Æ‡¶æ‡¶Ç‡¶∏‡¶ø‡¶§ ‡¶ï‡¶æ‡¶ú' }
  };

  // Add a new Todo item
  const addTodo = () => {
    if (newTodo.trim()) {
      const newEntry = { text: newTodo, completed: false, timestamp: new Date() };
      setTodos([...todos, newEntry]);
      setNewTodo('');
      setEditingIndex(-1);
    }
  };

  // Edit a Todo item
  const editTodo = (index) => {
    setNewTodo(todos[index].text);
    setEditingIndex(index);
  };

  // Update the Todo item after editing
  const updateTodo = () => {
    const updatedTodos = [...todos];
    updatedTodos[editingIndex].text = newTodo;
    setTodos(updatedTodos);
    setNewTodo('');
    setEditingIndex(-1);
  };

  // Delete a Todo item
  const deleteTodo = (index) => {
    const updatedTodos = todos.filter((_, i) => i !== index);
    setTodos(updatedTodos);
  };

  // Toggle todo completion status
  const toggleTodo = (index) => {
    const updatedTodos = [...todos];
    updatedTodos[index].completed = !updatedTodos[index].completed;
    setTodos(updatedTodos);
  };

  // Font size adjustments
  const increaseFontSize = () => setFontSize(fontSize + 2);
  const decreaseFontSize = () => setFontSize(fontSize > 12 ? fontSize - 2 : 12);

  // Toggle dark and contrast modes
  const toggleContrast = () => setContrastMode(!contrastMode);
  const toggleDarkMode = () => setDarkMode(!darkMode);

  // Text-to-speech for Todos (based on selected language)
  const speakTodo = (todo) => {
    const synth = window.speechSynthesis;
    const utterThis = new SpeechSynthesisUtterance(todo.text);
    utterThis.lang = getLangCode(language); // Set language for speech
    synth.speak(utterThis);
  };

  const getLangCode = (lang) => {
    const langCodes = { en: 'en-US', hi: 'hi-IN', ta: 'ta-IN', te: 'te-IN', ml: 'ml-IN', kn: 'kn-IN', mr: 'mr-IN', bn: 'bn-IN' };
    return langCodes[lang] || 'en-US';
  };

  // Time feature for all time zones
  useEffect(() => {
    const interval = setInterval(() => {
      setTimezone(new Date().toLocaleString('en-US', { timeZone: 'UTC' }));
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  const currentLang = translations[language];

  return (
    <div
      className={`app ${darkMode ? 'dark' : ''} ${contrastMode ? 'high-contrast' : ''}`}
      style={{ fontSize: `${fontSize}px` }}
    >
      <header>
        <h1>{currentLang.title}</h1>
        <div className="controls">
          <button onClick={increaseFontSize}>A+</button>
          <button onClick={decreaseFontSize}>A-</button>
          <button onClick={toggleContrast}>
            {contrastMode ? currentLang.normalContrast : currentLang.highContrast}
          </button>
          <button onClick={toggleDarkMode}>
            {darkMode ? currentLang.lightMode : currentLang.darkMode}
          </button>
          <select onChange={(e) => setLanguage(e.target.value)} value={language}>
            <option value="en">English</option>
            <option value="hi">‡§π‡§ø‡§®‡•ç‡§¶‡•Ä (Hindi)</option>
            <option value="ta">‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç (Tamil)</option>
            <option value="te">‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å (Telugu)</option>
            <option value="ml">‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç (Malayalam)</option>
            <option value="kn">‡≤ï‡≤®‡≥ç‡≤®‡≤° (Kannada)</option>
            <option value="mr">‡§Æ‡§∞‡§æ‡§†‡•Ä (Marathi)</option>
            <option value="bn">‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ (Bengali)</option>
          </select>
        </div>
      </header>

      <div className="todo-container">
        <h2>{currentLang.addTask}</h2>
        <input
          type="text"
          value={newTodo}
          onChange={(e) => setNewTodo(e.target.value)}
          placeholder={currentLang.addTask}
        />
        <button onClick={editingIndex === -1 ? addTodo : updateTodo}>
          {editingIndex === -1 ? currentLang.addButton : currentLang.editButton}
        </button>
      </div>

      <div className="todo-list">
        <h3>{currentLang.pendingHeader}</h3>
        {todos.filter((todo) => !todo.completed).map((todo, index) => (
          <div key={index} className="todo-item">
            <input
              type="checkbox"
              checked={todo.completed}
              onChange={() => toggleTodo(index)}
            />
            <span>{todo.text}</span>
            <button onClick={() => speakTodo(todo)}>üîä</button>
            <button onClick={() => editTodo(index)}>{currentLang.editButton}</button>
            <button onClick={() => deleteTodo(index)}>{currentLang.deleteButton}</button>
          </div>
        ))}

        <h3>{currentLang.completedHeader}</h3>
        {todos.filter((todo) => todo.completed).map((todo, index) => (
          <div key={index} className="todo-item completed">
            <input
              type="checkbox"
              checked={todo.completed}
              onChange={() => toggleTodo(index)}
            />
            <span>{todo.text}</span>
            <button onClick={() => speakTodo(todo)}>üîä</button>
            <button onClick={() => editTodo(index)}>{currentLang.editButton}</button>
            <button onClick={() => deleteTodo(index)}>{currentLang.deleteButton}</button>
          </div>
        ))}
      </div>
      
      <footer>
        <p>Current time in UTC: {timezone}</p>
      </footer>

      

    </div>
  );
}

export default TodoList;
